#+TILE: Emacs configuration
#+AUTHOR: Srimanta Barua

* Starting up
** Set sane defaults

*** UTF-8

#+BEGIN_SRC emacs-lisp
  (prefer-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING))
#+END_SRC

*** backup files

Emacs saves backup files which end with '~' and clutter up directories. Set up a dedicated backup directory for these files.

#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
#+END_SRC

*** Load non version-controlled files

=.custom.el= stores options from the built-in customization interface for Emacs

#+BEGIN_SRC emacs-lisp
  (setq-default custom-file (expand-file-name ".custom.el" user-emacs-directory))
  (when (file-exists-p custom-file)
    (load custom-file))
#+END_SRC

I use =secrets.el= to store variables I don't want to put on Github

#+BEGIN_SRC emacs-lisp
  (let ((secrets-file (expand-file-name "secrets.el" user-emacs-directory)))
    (when (file-exists-p secrets-file)
      (load secrets-file)))
#+END_SRC

* UI configuration
** Disable distracting UI elements

#+BEGIN_SRC emacs-lisp
  (blink-cursor-mode -1)          ;; Disable cursor blinking
  (scroll-bar-mode -1)            ;; Disable scroll bar
  (tool-bar-mode -1)              ;; Disable tool bar
  (menu-bar-mode -1)              ;; Disable menu bar
  (setq inhibit-startup-screen t)  ;; Disable initial welcome screen
#+END_SRC

** Enable some sensible defaults

#+BEGIN_SRC emacs-lisp
  (display-time-mode t)           ;; Display time in modeline
  (column-number-mode t)          ;; Display column number in modeline
  (global-linum-mode t)           ;; Enable line numbers everywhere
  (electric-pair-mode t)          ;; Color pairs (parens, brackets etc) when typing
  (setq-default line-spacing 3)   ;; Set spacing between lines
#+END_SRC

** Configure fonts

#+BEGIN_SRC emacs-lisp
  (custom-theme-set-faces
   'user
   '(variable-pitch ((t (:family "Roboto" :height 120))))
   '(fixed-pitch ((t (:family "SF Mono" :height 110)))))
#+END_SRC

** Start Emacs maximized

#+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
#+END_SRC

** Configure Emacs theme

The =doom-one= theme looks good.

#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :ensure t
    :config
    (setq doom-themes-enable-bold t
          doom-themes-enable-italic t)
    (load-theme 'doom-one t))
#+END_SRC

* UX Configuration
** Smooth Scrolling
   
By default, Emacs scrolls by half a screen when we move off the edge. Change that to move one line at a time.

#+BEGIN_SRC emacs-lisp
  (use-package smooth-scrolling
    :ensure t)
  (smooth-scrolling-mode t)
#+END_SRC

** Relative line numbering

In vim, I bind =<leader> r= (i.e. =, r=) to switch to relative line numbering in the current buffer. Enable similar functionality for Emacs.

#+BEGIN_SRC emacs-lisp
  (use-package linum-relative
    :ensure t
    :config
    (linum-relative-off)
    (linum-on))
  (require 'linum-relative)

  ;; Define a function to toggle relative line numbers
  (defun my/linum-relative-toggle ()
    (interactive)
    (linum-relative-toggle)
    (linum-on))
#+END_SRC

** =evil-mode= for Vim emulation
    
Frankly speaking, Vim is a much better text editor than Emacs. We can capture some of that using =evil-mode= in Emacs.

#+BEGIN_SRC emacs-lisp
  (use-package evil
    :ensure t
    :init
    ;; Use C-u and C-d for scrolling
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-d-scroll t))

  ;; Enable evil mode
  (evil-mode t)
#+END_SRC

** =which-key= to know what to press next

=which-key= is a helpful plugin which brings up a popup with all the keybindings available after the key you've just pressed.

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :config
    (which-key-setup-side-window-bottom))

  ;; Enable which-key
  (which-key-mode)
#+END_SRC

** =ivy=, =counsel=, and =swiper=

=ivy= is a generic completion framework for Emacs.

#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :ensure t
    :config
    (setq ivy-use-virtual-buffers t
	  enable-recursive-minibuffers t))
  (ivy-mode t)
#+END_SRC

=counsel= goes one step further to replace standard commands with ones which make best use of =ivy=.

#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :ensure t)
  (counsel-mode t)
#+END_SRC

Enable =swiper= for searching.

#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :ensure t)
#+END_SRC

* Version control
** Disable Emacs' built-in version control
   
#+BEGIN_SRC emacs-lisp
  (setq vc-handled-backends nil)
#+END_SRC

** Use =magit= for git

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t)
#+END_SRC

* Programming
** Autocompletion with =company=

Company stands for "COMPlete ANYthing", and is an extensible completion framework for Emacs

#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :config
    ;; Reduce delay when waiting for completions
    (setq company-idle-delay 0.1)
    (setq company-minimum-prefix-length 1)
    ;; Prevent suggestions from being triggered. Tab always completes current
    ;; selection, Return will only complete if user has interacted with company
    (dolist (key '("<return>" "RET"))
      (define-key company-active-map (kbd key)
	`(menu-item nil company-complete
		    :filter ,(lambda (cmd)
			       (when (company-explicit-action-p)
				 cmd)))))
    (define-key company-active-map (kbd "TAB") #'company-complete-selection)
    (define-key company-active-map (kbd "<tab>") #'company-complete-selection)
    (define-key company-active-map (kbd "SPC") nil)
    (setq company-auto-complete-chars nil))

  ;; Enable company-mode globally
  (global-company-mode)
#+END_SRC

** Syntax checking with =flycheck=

Flycheck is a syntax checker/linter with multiple backends.

#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t)
#+END_SRC

** Snippets with =yasnippet=

=yasnippet= is a snippet-expansion plugin

#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :config
    (use-package yasnippet-snippets
      :ensure t)
    (yas-reload-all))

  ;; Enable yasnippet
  (yas-global-mode t)
#+END_SRC

** Project management with =projectile=

=projectile= is a project-management package for Emacs

#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :config
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map))
  (projectile-mode 1)
#+END_SRC

** Language server protocol

Microsoft's Language Server Protocol allows for asynchronous language-specific actions (like completion), using external server processes.

#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :ensure t

    ;; Use Flycheck instead of Flymake
    :init (setq lsp-prefer-flymake nil)

    ;; Enable when 'lsp' is run
    :commands lsp

    :config
    ;; lsp-ui for showing things like error messages to the side
    (use-package lsp-ui
      :ensure t
      :commands lsp-ui-mode)
    (lsp-ui-mode)

    ;; company-lsp provides lsp as a company backend
    (use-package company-lsp
      :ensure t
      :commands company-lsp)
    (push 'company-lsp company-backends))
#+END_SRC

** Languages

*** C

C indentation is really messed up in Emacs by default    

#+BEGIN_SRC emacs-lisp
  (add-hook 'c-mode-hook
	    (lambda ()
	      (progn
		(setq-local c-basic-offset 8)
		(setq-local c-default-style "linux")
		(setq-local tab-width 8)
		(setq-local indent-tabs-mode t)
		(lsp))))
#+END_SRC

*** Rust

Rust is not supported out of the box. Install =rust-mode= to enable support

#+BEGIN_SRC emacs-lisp
  (use-package rust-mode
    :ensure t)
#+END_SRC

On entering Rust mode, enable indentation with 4 spaces, and enable [[Language server protocol][lsp]] support with =rls=

#+BEGIN_SRC emacs-lisp
  (add-hook 'rust-mode-hook
            (lambda ()
              (progn
                (setq-local indent-tabs-mode nil)
                (setq-local tab-width 4)
                (lsp))))
#+END_SRC

Add a function to run Rust (cargo) tests

#+BEGIN_SRC emacs-lisp
  (defun my/rust-cargo-test ()
    "Run cargo test"
    (interactive)
    (shell-command (format "cd %s ; cargo test&" default-directory) "*cargo test*"))
#+END_SRC

*** Python

On entering Python mode, enable indentation with 4 spaces, and enable [[Language server protocol][lsp]] support with =pyls=

#+BEGIN_SRC emacs-lisp
  (add-hook 'python-mode-hook
	    (lambda ()
	      (progn
		(setq-local indent-tabs-mode nil
			    tab-width 4)
		(lsp))))
#+END_SRC

*** CMake

CMake is not supported out of the box. Install =cmake-mode= to enable support

#+BEGIN_SRC emacs-lisp
  (use-package cmake-mode
    :ensure t)
#+END_SRC

* Org mode

My configuration for org mode

** Prettify

Hide emphasis markers ('*' for bold, '/' for italics)

#+BEGIN_SRC emacs-lisp
  (setq org-hide-emphasis-markers t)
#+END_SRC

Indent to different levels

#+BEGIN_SRC emacs-lisp
  (setq org-startup-indented t
	org-src-tab-acts-natively t)
#+END_SRC

Configure different bullet styles for different levels

#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t)
  (add-hook 'org-mode-hook 'org-bullets-mode)
#+END_SRC

Customize faces for org mode elements. We are going to be switching to a variable-pitch font by default, and overriding it with a fixed-width font for specific elements (code blocks, tables)

#+BEGIN_SRC emacs-lisp
  (custom-theme-set-faces
   'user
   '(org-document-info ((t (:foreground "dark orange"))))
   '(org-document-info-keyword ((t (:inherit (shadow fixed-pitch)))))
   '(org-indent ((t (:inherit (org-hide fixed-pitch)))))
   '(org-link ((t (:foreground "royal blue" :underline t))))
   '(org-meta-line ((t (:inherit (font-lock-comment-face fixed-pitch)))))
   '(org-property-value ((t (:inherit fixed-pitch))))
   '(org-special-keyword ((t (:inherit font-lock-comment-face fixed-pitch))))
   '(org-block ((t (:inherit fixed-pitch))))
   '(org-code ((t (:inherit (shadow fixed-pitch)))))
   '(org-table ((t (:inherit fixed-pitch :foreground "forest green"))))
   '(org-tag ((t (:inherit (shadow fixed-pitch) :weight bold :height 0.8))))
   '(org-verbatim ((t (:inherit (shadow fixed-pitch))))))
#+END_SRC

Use a variable width font for org mode buffers. Also enable =visual-line-mode=, since this adjusts long lines better.

#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook
            (lambda ()
              (variable-pitch-mode t)
              (visual-line-mode t)))
#+END_SRC

* Keybindings

I'm trying out =general.el= to manage my key bindings. In *normal mode*, I bind =SPC= as prefix. In non-normal (insert) modes, use =M-SPC= as prefix.

#+BEGIN_SRC emacs-lisp
  (use-package general
    :ensure t
    :config)
#+END_SRC

Top-level keybindings

#+BEGIN_SRC emacs-lisp
  (general-define-key
   :states 'normal
   :prefix "SPC"
    "f" '(counsel-find-file :which-key "file")                   ;; Find & open file
    "d" '(counsel-dired :which-key "directory")                  ;; Find & open directory
    "w" '(save-buffer :which-key "save")                         ;; Save current buffer
    "r" '(my/linum-relative-toggle :which-key "relative linum")  ;; Toggle relative linum
    "b" '(counsel-switch-buffer :which-key "buffer")             ;; Switch to buffer
    "k" '(kill-buffer :which-key "kill buffer")                  ;; Kill buffer
    "g" '(magit-status :which-key "magit")                       ;; Get magit status
    "[" '(previous-buffer :which-key "prev buf")                 ;; Switch to prev buffer
    "]" '(next-buffer :which-key "next buf")                     ;; Switch to next buffer
    "B" '(counsel-bookmark :which-key "bookmark")                ;; Create/switch to bookmark
    ;; Projectile stuff
    "pp" '(projectile-switch-project :which-key "project")
    "pf" '(projectile-find-file :which-key "file")
    "pa" '(projectile-add-known-project :which-key "add")
    ;; Searching with Swiper
    "s" '(swiper-isearch :which-key "isearch")
    "S" '(swiper-isearch-thing-at-point :which-key "isearch at point")
   )
#+END_SRC

** emacs lisp keybindings

Keybindings for emacs lisp - evaluating functions and buffers

#+BEGIN_SRC emacs-lisp
  (general-define-key
   :states 'normal
   :keymaps 'emacs-lisp-mode-map
   :prefix "SPC"
   "lf" '(eval-defun :which-key "defun")   ;; Evaluate function at point
   "lb" '(eval-buffer :which-key "buffer") ;; Evaluate current buffer
   )
#+END_SRC

** Rust keybindings

Keybindings for Rust

#+BEGIN_SRC emacs-lisp
  (general-define-key
   :states 'normal
   :keymaps 'rust-mode-map
   :prefix "SPC"
   "lf" '(rust-format-buffer :which-key "rustfmt")     ;; Format current buffer with rustfmt
   "lc" '(rust-compile :which-key "cargo build")       ;; Build project with cargo build
   "lt" '(my/rust-cargo-test :which-key "cargo build") ;; Run cargo tests
   )
#+END_SRC

** Org-mode keybindings

#+BEGIN_SRC emacs-lisp
  (general-define-key
   :states 'normal
   :keymaps 'org-mode-map
   :prefix "SPC"
   "a" '(org-agenda :which-key "agenda")  ;; Open org agenda
   )
#+END_SRC

That's all, folks!
